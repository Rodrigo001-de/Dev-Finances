:root {
  --dark-blue: #363F5F;
  --green: #49AA26;
  --light-green: #3DD705;
  --red: #E92929;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  font-size: 93.75%; /* 15px */
}

body {
  background: #f0f2f5;
  font-family: 'Poppins', sans-serif;
}

/* o sr.only vai manter o conteúdo visível somente para os leitores de tela */
.sr-only {
  /* position: absolute é sempre relativo ao ao elemento pai que ele está 
    Se o elemento pai tiver um position relative o elemento filho que receber
    o position absolute vai ficar na frente de outros elementos irmãos
  */
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.container {
  /* se 90vw(90 de tudo o que esta sendo visualizado) for menor que 800px
    então ele vai colocar 90% de largura do viewport da tela se não ele vai
    colocar 800px 
  */
  width: min(90vw, 800px);

/* margin: auto vai igualar as margens proporcionalmente horizontal */
  margin: auto;
}

h2 {
  margin-top: 3.2rem;
  margin-bottom: 0.8rem;
  color: var(--dark-blue);

  font-weight: normal;
}

a {
  color: var(--green);
  text-decoration: none;
}

a:hover {
  color: var(--light-green);
}

button {
  width: 100%;
  height: 50px;

  border: none;

  color: #FFF;
  background: var(--green);

  padding: 0;

  border-radius: 0.25rem;

  cursor: pointer;

  transition: 0.4s ease-in;
}

button:hover {
  background: var(--light-green);
}

.button.new {
  /* No display inline eu não consigo colocar margin-bottom mas no block eu
    consigo mas o block pega o 100% de espaço do elemento e para isso exite o 
    display inline-block que pega o display inline e o display block
  */
  display: inline-block;
  margin-bottom: 0.8rem;
}

.button.cancel {
  color: var(--red);
  border: 2px var(--red) solid;
  border-radius: 0.25rem;

  height: 50px;

  display: flex;
  align-items: center;
  justify-content: center;

  transition: 0.4s ease-in;
  opacity: 0.6;
}

.button.cancel:hover {
  opacity: 1;
}

header {
  background: #2D4A22;
  padding: 2rem 0 10rem;
  text-align: center;
}

#logo {
  color: #FFF;
  font-weight: 200;
}

#balance {
  margin-top: -8rem;
}

#balance h2 {
  color: #FFF;
  margin-top: 0;
}

.card {
  background: #FFF;
  padding: 1.5rem 2rem;
  border-radius: 0.25rem;

  margin-bottom: 2rem;

  color: var(--dark-blue);
}

.card h3 {
  font-weight: normal;
  font-size: 1rem;

  /* O comportamento padrão do HTML é um elento abaixo do outro mas o
    comportamento do display flex por padão é um elemento do lado do outro(inline)
  */
  display: flex;
  /* Eixo X(HOrizontal) */
  align-items: center;
  /* justify-content arruma o espaço entre os elementos horizontalmente */
  justify-content: space-between;
}

.card p {
  font-size: 2rem;
  /* line-height é a separação de linha, caso ocorra uma quebra de linha ele
    terá uma quebra de linha
  */
  line-height: 3rem;

  margin-top: 1rem;
}

.card.total {
  background: var(--green);
  color: #FFF;
}

#transaction {
  display: block;
  width: 100%;

  /* para o data-table quando for necessário o overflow-x: auto vai criar
    uma rolagem no eixo X automática, somente para o data-table
  */
  overflow-x: auto;
}

#data-table {
  width: 100%;
  border-spacing: 0 0.5rem;
  color: #969CB3;
}

table thead tr th:first-child, 
table tbody tr td:first-child  {
  border-radius: 0.25rem 0 0 0.25rem;
}

table thead tr th:last-child,
table tbody tr td:last-child {
  border-radius: 0 0.25rem 0.25rem 0;
}

table thead th {
  background: #FFF;

  font-weight: normal;
  padding: 1rem 2rem;

  text-align: left;
}

table tbody tr {
  opacity: 0.7;
}
table tbody tr:hover {
  opacity: 1;
}

table tbody td {
  background: #FFF;

  padding: 1rem 2rem;
}

td.description {
  color: var(--dark-blue);
}

td.income {
  color: #12A454;
}

td.expense {
  color: #E92929;
}

.modal-overlay {
  width: 100%;
  height: 100%;

  /* RGBA(Red, Green, Blue, Alpha) */
  /* Alpha é a opacidade da cor */
  background-color: rgba(0, 0, 0, 0.7);

  position: fixed;
  top: 0;

  display: flex;
  align-items: center;
  justify-content: center;

  opacity: 0;
  visibility: hidden;
}

.modal-overlay.active {
  opacity: 1;
  visibility: visible;
}

.modal {
  background: #F0F2F5;
  /* Não é necessário colocar o height e nem o width por causa do 
    padding(preenchimento interno) que vai crecer junto com o conteúdo do modal
  */
  padding: 2.4rem;
  position: relative;
  width: 90%;
  max-width: 500px;
}

#form {
  max-width: 500px;
}
#form h2 {
  margin-top: 0;
}

input {
  border: none;
  border-radius: 0.2rem;

  padding: 0.8rem;

  width: 100%;
}

.input-group {
  margin-top: 0.8rem;
}

.input-group small {
  opacity: 0.4;
}

.input-group.actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.input-group.actions .button,
.input-group.actions button {
  width: 38%;
}

footer {
  text-align: center;
  padding: 4rem 0 2rem;
  color: var(--dark-blue);

  opacity: 0.6;
}

@media (min-width: 800px) {
  html {
    font-size: 87.5%;
  }

  #balance {
    /* com o display grid eu posso manipular os elementos tanto verticalmente
      quanto horizontalmente
    */
    display: grid;
    /* no grid tem uma unidade de mediada chamada fr(fração) */
    grid-template-columns: repeat(3, 1fr);
    /* gap é o espaço entre as colunas */
    gap: 2rem;
  }
}